"""
Django settings for blog project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
import sys
from dotenv import load_dotenv
import os

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#check if environment is test or not
TESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True



ALLOWED_HOSTS = [
    "127.0.0.1",
    "localhost",
    "vadodev.onrender.com"
]


AUTH_USER_MODEL = "authentication.User"


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "authentication",
    "blogapp",
    "portfolio",
    "markdownx",
    #"martor",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "blog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
    os.path.join(BASE_DIR, 'templates')
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
            'libraries':{
                'templatetags': 'blogapp.templatetags.blog_extras',
            
            }
        },
    },
]

WSGI_APPLICATION = "blog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": 'django.db.backends.postgresql',
#         "NAME": os.environ.get('DB_NAME'),
#         "USER": os.environ.get('DB_USER'),
#         "PASSWORD":os.environ.get('DB_PASSWORD'),
#         "HOST":os.environ.get('DB_HOST'),
#         "PORT": os.environ.get('DB_PORT')
#     }
# }

DATABASES = {
  'default' :{
    'ENGINE':'django.db.backends.sqlite3',
    'NAME':BASE_DIR / 'db.sqlite3',
  }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

#email config ---> can be set in .env
EMAIL_FROM_USER = ''
EMAIL_HOST = os.environ.get('EMAIL_HOST')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS =os.environ.get('EMAIL_USE_TLS')
EMAIL_PORT = os.environ.get('EMAIL_PORT')
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
#STATIC_ROOT = os.path.join(os.path.dirname(__file__), 'static')
#if not DEBUG:
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    # STORAGES = {
    #             # â€¦
    #             'staticfiles': {
    #             'BACKEND': 'whitenoise.storage.CompressedManifestStaticFilesStorage',
    #             },
    #             }
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'blog/static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGIN_REDIRECT_URL = 'auth'

LOGIN_URL = 'login'





















# # Choices are: "semantic", "bootstrap"
# MARTOR_THEME = 'bootstrap'

# # Global martor settings
# # Input: string boolean, `true/false`
# MARTOR_ENABLE_CONFIGS = {
#     'emoji': 'true',        # to enable/disable emoji icons.
#     'imgur': 'true',        # to enable/disable imgur/custom uploader.
#     'mention': 'false',     # to enable/disable mention
#     'jquery': 'true',       # to include/revoke jquery (require for admin default django)
#     'living': 'false',      # to enable/disable live updates in preview
#     'spellcheck': 'false',  # to enable/disable spellcheck in form textareas
#     'hljs': 'true',         # to enable/disable hljs highlighting in preview
# }

# # To show the toolbar buttons
# MARTOR_TOOLBAR_BUTTONS = [
#     'bold', 'italic', 'horizontal', 'heading', 'pre-code',
#     'blockquote', 'unordered-list', 'ordered-list',
#     'link', 'image-link', 'image-upload', 'emoji',
#     'direct-mention', 'toggle-maximize', 'help'
# ]

# # To setup the martor editor with title label or not (default is False)
# MARTOR_ENABLE_LABEL = False

# # Imgur API Keys
# MARTOR_IMGUR_CLIENT_ID = '1a4c90ccaf6427c'
# MARTOR_IMGUR_API_KEY   = '34e30a87c6848c2d5a6517cad8fdfc8964659513'

# # Markdownify
# MARTOR_MARKDOWNIFY_FUNCTION = 'martor.utils.markdownify' # default
# MARTOR_MARKDOWNIFY_URL = '/martor/markdownify/' # default

# # Markdown extensions (default)
# MARTOR_MARKDOWN_EXTENSIONS = [
#     'markdown.extensions.extra',
#     'markdown.extensions.nl2br',
#     'markdown.extensions.smarty',
#     'markdown.extensions.fenced_code',

#     # Custom markdown extensions.
#     'martor.extensions.urlize',
#     'martor.extensions.del_ins',      # ~~strikethrough~~ and ++underscores++
#     'martor.extensions.mention',      # to parse markdown mention
#     'martor.extensions.emoji',        # to parse markdown emoji
#     'martor.extensions.mdx_video',    # to parse embed/iframe video
#     'martor.extensions.escape_html',  # to handle the XSS vulnerabilities
# ]

# # Markdown Extensions Configs
# MARTOR_MARKDOWN_EXTENSION_CONFIGS = {}

# # Markdown urls
# MARTOR_UPLOAD_URL = '' # Completely disable the endpoint
# # or:
# MARTOR_UPLOAD_URL = '/martor/uploader/' # default

# MARTOR_SEARCH_USERS_URL = '' # Completely disables the endpoint
# # or:
# MARTOR_SEARCH_USERS_URL = '/martor/search-user/' # default

# # Markdown Extensions
# # MARTOR_MARKDOWN_BASE_EMOJI_URL = 'https://www.webfx.com/tools/emoji-cheat-sheet/graphics/emojis/'     # from webfx
# MARTOR_MARKDOWN_BASE_EMOJI_URL = 'https://github.githubassets.com/images/icons/emoji/'                  # default from github
# # or:
# MARTOR_MARKDOWN_BASE_EMOJI_URL = ''  # Completely disables the endpoint
# MARTOR_MARKDOWN_BASE_MENTION_URL = 'https://python.web.id/author/'                                      # please change this to your domain

# # If you need to use your own themed "bootstrap" or "semantic ui" dependency
# # replace the values with the file in your static files dir
# MARTOR_ALTERNATIVE_JS_FILE_THEME = "semantic-themed/semantic.min.js"   # default None
# MARTOR_ALTERNATIVE_CSS_FILE_THEME = "semantic-themed/semantic.min.css" # default None
# MARTOR_ALTERNATIVE_JQUERY_JS_FILE = "jquery/dist/jquery.min.js"        # default None

# # URL schemes that are allowed within links
# ALLOWED_URL_SCHEMES = [
#     "file", "ftp", "ftps", "http", "https", "irc", "mailto",
#     "sftp", "ssh", "tel", "telnet", "tftp", "vnc", "xmpp",
# ]

# # https://gist.github.com/mrmrs/7650266
# ALLOWED_HTML_TAGS = [
#     "a", "abbr", "b", "blockquote", "br", "cite", "code", "command",
#     "dd", "del", "dl", "dt", "em", "fieldset", "h1", "h2", "h3", "h4", "h5", "h6",
#     "hr", "i", "iframe", "img", "input", "ins", "kbd", "label", "legend",
#     "li", "ol", "optgroup", "option", "p", "pre", "small", "span", "strong",
#     "sub", "sup", "table", "tbody", "td", "tfoot", "th", "thead", "tr", "u", "ul"
# ]

# # https://github.com/decal/werdlists/blob/master/html-words/html-attributes-list.txt
# ALLOWED_HTML_ATTRIBUTES = [
#     "alt", "class", "color", "colspan", "datetime",  # "data",
#     "height", "href", "id", "name", "reversed", "rowspan",
#     "scope", "src", "style", "title", "type", "width"
# ]


# CSRF_COOKIE_HTTPONLY = False